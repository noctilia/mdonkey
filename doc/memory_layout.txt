Name                Start Address       End Address
Main ROM            0x0000              0x3FFF                  
                    0x0000              0x0fff    c_5f_b.bin    
                    0x1000              0x1fff    5g.cpu
                    0x2000              0x2fff    5h.cpu
                    0x3000              0x3fff    c_5k_b.bin
0x36b4              String "HIGH SCORE"                    
                    
Main RAM            0x6000              0x6BFF
                    0x6900              sprite local ram 
                    
0x6229              number of lives

Sprite Ram          0x7000              0x73FF
                           
                          [xpos][col][spr][ypos]    x,y are inverted
                             |     |    |    |
                             |     |    |    +----> y-pos 0..255 
                             |     |    +---------> [flipx][sprite nr 0..7f]                            
                             |     +--------------> [flipy][unused 6..4][color 3..0]
                             +--------------------> x-pos 0..255     
                                        
                    Sprite: xpos spr    col  ypos
                            11   18     11   30      barrel
                            11   00     02   30      mario idle left blue
                            11   01     a1   30      mario run 0
                            11   02     a1   30      mario run 1
                            11   03     a1   30      mario climp 0
                            11   04     a1   30      mario climp 1
                            11   05     a1   30      mario climp 2
                            11   06     a1   30      mario climp idle
                            11   07     a1   30      none
                            11   08     a1   30      mario idle hammer up
                            11   09     a1   30      mario idle hammer down
                            11   0A     a1   30      mario run hammer up
                            11   0B     a1   30      mario run hammer down
                            11   0C     a1   30      mario run hammer up
                            11   0D     a1   30      mario run hammer down
                            11   0E     a1   30      mario jump
                            11   0F     a1   30      mario braking
                            11   10     81   30      pauline head  6f 10 09 23
                            11   11     81   30      pauline body 0
                            11   12     81   30      pauline body 1
                            11   13     81   30      pauline body 2                           
                            11   14     8b   30      pauline captured
                            11   15     8b   30      barrel roll 0 (marker right top)
                            11   16     8b   30      barrel horizontal dark middle
                            11   17     8b   30      barrel horizontal light middle
                            11   18     8b   30      barrel vertical dark middle
                            11   19     8c   39      barrel roll 0 (skull left bottom)
                                 
                                 23 
                                 25 
                                 27                  kong feet right
                                 28
                                 29                  kong arm left
                                 
                            11   39     84   30      kong effect falling
                            
                            11   3B     81   30      falling spring open 
                            11   3c     81   30      falling spring closed
                            11   3d     81   30      flame red 0
                            11   3d     80   30      flame blue 0
                            11   3e     81   30      flame red 1
                            11   3e     80   30      flame blue 1
                            
                            11   c9     8c   10      oil can  sprite 49, flipX 80 -> c9
                            
                                 a7                  kong feet left 
                            17   f6     89   30      heart pink
                            17   f7     89   30      heart pink broken
                            
                            6f   10     09   23      6f 12 0a 33 47               
                            
                    70b8    1e 18 0b 4b    barrel    
                    70bc    14 18 0b 4b    barrel
                    70b0    1e 18 0b 3b    barrel
                    70b4    14 18 0b 3b    barrel 
                            
            
Tile Ram            0x7400              0x77FF
8257 DMA Registers  0x7800              0x780F
Interface 0         0x7C00              0x7C00
Interface 1         0x7C80              0x7C80
DSW 2/Audio IRQ     0x7D80              0x7D80
Flip Screen         0x7D82              0x7D82
Sprite Bank         0x7D83              0x7D83
NMI Mask            0x7D84              0x7D84
8257 DRQ            0x7D85              0x7D85
Palette Bank        0x7D86              0x7D87

------------------------------------------------------------------------
0x0000-0x3FFF	  16384	ROM	
0x6000-0x6BFF	   3072	RAM	
0x7000-0x73FF	   1024	RAM, Shared	sprite_ram (/* sprite set 1 */)
0x7400-0x77FF	   1024	RAM Write, Shared	dkong_videoram_w, video_ram
0x7800-0x780F	     16 Device Read/Write	dma8257, i8257_device, read, write (/* P8257 control registers */)
0x7C00	            1	Read Port, Write Latch 8-bit	IN0, ls175.3d (/* IN0, sound CPU intf */)
0x7C80	            1	Read Port, Write	IN1, radarscp_grid_color_w (/* IN1 */)
0x7D00-0x7D07	      8	Device Write	ls259.6h, latch8_device, bit0_w (/* Sound signals */)
0x7D00	            1	Read	dkong_in2_r (/* IN2 */)
0x7D80	            1	Read Port, Write	DSW0, dkong_audio_irq_w (/* DSW0 */)
0x7D81	            1	Write	radarscp_grid_enable_w
0x7D82	            1	Write	dkong_flipscreen_w
0x7D83	            1	Write	dkong_spritebank_w (/* 2 PSL Signal */)
0x7D84	            1	Write	nmi_mask_w
0x7D85	            1	Write	p8257_drq_w (/* P8257 ==> /DRQ0 /DRQ1 */)
0x7D86-0x7D87	      2	Write	dkong_palettebank_w


-------------------------------------------------------------------------
/*************************************
 *
 *  Graphics definitions
 *
 *************************************/

static const gfx_layout spritelayout =
{
	16,16,                                  /* 16*16 sprites */
	RGN_FRAC(1,4),                          /* 128 sprites */
	2,                                      /* 2 bits per pixel */
	{ RGN_FRAC(1,2), RGN_FRAC(0,2) },       /* the two bitplanes are separated */
	{ STEP8(0,1), STEP8(RGN_FRAC(1,4),1) }, /* the two halves of the sprite are separated */
	{ STEP16(0,8) },
	16*8                                    /* every sprite takes 16 consecutive bytes */
};

static GFXDECODE_START( gfx_dkong )
	GFXDECODE_ENTRY( "gfx1", 0x0000, gfx_8x8x2_planar,   0, 64 )
	GFXDECODE_ENTRY( "gfx2", 0x0000, spritelayout,       0, 64 )
GFXDECODE_END


# digfx.h

struct gfx_layout
{
	u32 xoffs(int x) const { return (extxoffs != nullptr) ? extxoffs[x] : xoffset[x]; }
	u32 yoffs(int y) const { return (extyoffs != nullptr) ? extyoffs[y] : yoffset[y]; }

	u16             width;              // pixel width of each element
	u16             height;             // pixel height of each element
	u32             total;              // total number of elements, or RGN_FRAC()
	u16             planes;             // number of bitplanes
	u32             planeoffset[MAX_GFX_PLANES]; // bit offset of each bitplane
	u32             xoffset[MAX_GFX_SIZE]; // bit offset of each horizontal pixel
	u32             yoffset[MAX_GFX_SIZE]; // bit offset of each vertical pixel
	u32             charincrement;      // distance between two consecutive elements (in bits)
	const u32 *     extxoffs;           // extended X offset array for really big layouts
	const u32 *     extyoffs;           // extended Y offset array for really big layouts
};

struct gfx_decode_entry
{
	const char *    memory_region;      // memory region where the data resides
	u32             start;              // offset of beginning of data to decode
	const gfx_layout *gfxlayout;        // pointer to gfx_layout describing the layout; nullptr marks the end of the array
	u16             color_codes_start;  // offset in the color lookup table where color codes start
	u16             total_color_codes;  // total number of color codes
	u32             flags;              // flags and optional scaling factors
};


RGN_FRAC
STEP8
STEP16




